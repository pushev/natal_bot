import React from 'react';

interface GenderStepProps {
  onNext: (gender: 'male' | 'female') => void; // Pass the selected gender
  setUserData: React.Dispatch<React.SetStateAction<any>>; // TODO: Use a proper type for userData
  userData: any; // TODO: Use a proper type for userData
}

const GenderStep: React.FC<GenderStepProps> = ({ onNext, setUserData, userData }) => {
  const handleSelectGender = (gender: 'male' | 'female') => {
    setUserData((prev: any) => ({ ...prev, gender }));
    // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∂–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è "–î–∞–ª–µ–µ"
  };

  const isNextDisabled = !userData.gender;

  return (
    <div className="onboarding-step">
      <h2>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª</h2>
      <p className="step-explanation">–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–µ–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.</p>
      <div className="gender-options">
        <button
          className={`gender-button ${userData.gender === 'male' ? 'selected' : ''}`}
          onClick={() => handleSelectGender('male')}
        >
          <span role="img" aria-label="male">üë®</span> –ú—É–∂—Å–∫–æ–π
        </button>
        <button
          className={`gender-button ${userData.gender === 'female' ? 'selected' : ''}`}
          onClick={() => handleSelectGender('female')}
        >
          <span role="img" aria-label="female">üë©</span> –ñ–µ–Ω—Å–∫–∏–π
        </button>
      </div>
      {/* –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –≤ onNext */}
      <button onClick={() => onNext(userData.gender)} disabled={isNextDisabled} className="button-next">
        –î–∞–ª–µ–µ
      </button>
      {/* –°—Ç–∏–ª–∏ –±—É–¥—É—Ç –≤ App.css */}
    </div>
  );
};

export default GenderStep; 