import React, { useState, useMemo, useEffect } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheck, faPen, faRepeat } from '@fortawesome/free-solid-svg-icons';
// –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã framer-motion
// import { motion, AnimatePresence } from 'framer-motion'; 

interface DashboardScreenProps {
  userData: Record<string, any>; // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
}

// –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ 3 –Ω–µ–¥–µ–ª–∏
const samplePlan = [
  // –ù–µ–¥–µ–ª—è 1
  { week: 1, day: 1, type: '–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ', description: '2 –º–∏–Ω –±–µ–≥ / 3 –º–∏–Ω —Ö–æ–¥—å–±–∞, 5 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π' },
  { week: 1, day: 2, type: '–û—Ç–¥—ã—Ö', description: '-' },
  { week: 1, day: 3, type: '–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ', description: '3 –º–∏–Ω –±–µ–≥ / 3 –º–∏–Ω —Ö–æ–¥—å–±–∞, 4 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è' },
  { week: 1, day: 4, type: '–û—Ç–¥—ã—Ö', description: '-' },
  { week: 1, day: 5, type: '–õ–µ–≥–∫–∞—è —Ö–æ–¥—å–±–∞', description: '30 –º–∏–Ω—É—Ç' },
  { week: 1, day: 6, type: '–û—Ç–¥—ã—Ö', description: '-' },
  { week: 1, day: 7, type: '–û—Ç–¥—ã—Ö', description: '-' },
  // –ù–µ–¥–µ–ª—è 2
  { week: 2, day: 1, type: '–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ', description: '3 –º–∏–Ω –±–µ–≥ / 2 –º–∏–Ω —Ö–æ–¥—å–±–∞, 5 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π' },
  { week: 2, day: 2, type: '–û—Ç–¥—ã—Ö', description: '-' },
  { week: 2, day: 3, type: '–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ', description: '4 –º–∏–Ω –±–µ–≥ / 2 –º–∏–Ω —Ö–æ–¥—å–±–∞, 4 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è' },
  { week: 2, day: 4, type: '–û—Ç–¥—ã—Ö', description: '-' },
  { week: 2, day: 5, type: '–õ–µ–≥–∫–∏–π –±–µ–≥', description: '15-20 –º–∏–Ω—É—Ç' },
  { week: 2, day: 6, type: '–û—Ç–¥—ã—Ö', description: '-' },
  { week: 2, day: 7, type: '–û—Ç–¥—ã—Ö', description: '-' },
  // –ù–µ–¥–µ–ª—è 3
  { week: 3, day: 1, type: '–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ', description: '5 –º–∏–Ω –±–µ–≥ / 2 –º–∏–Ω —Ö–æ–¥—å–±–∞, 4 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è' },
  { week: 3, day: 2, type: '–û—Ç–¥—ã—Ö', description: '-' },
  { week: 3, day: 3, type: '–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ', description: '6 –º–∏–Ω –±–µ–≥ / 2 –º–∏–Ω —Ö–æ–¥—å–±–∞, 3 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è' },
  { week: 3, day: 4, type: '–û—Ç–¥—ã—Ö', description: '-' },
  { week: 3, day: 5, type: '–õ–µ–≥–∫–∏–π –±–µ–≥', description: '20-25 –º–∏–Ω—É—Ç' },
  { week: 3, day: 6, type: '–û—Ç–¥—ã—Ö', description: '-' },
  { week: 3, day: 7, type: '–û—Ç–¥—ã—Ö', description: '-' },
  // ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
];

// –•–µ–ª–ø–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ DD.MM
const formatDate = (date: Date): string => {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0'); // –ú–µ—Å—è—Ü—ã —Å 0
    return `${day}.${month}`;
};

// –¢–∏–ø –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–ª–∞–Ω–∞
interface PlanItem {
    week: number;
    day: number;
    type: string;
    description: string;
}

const DashboardScreen: React.FC<DashboardScreenProps> = ({ userData }) => {
  const [currentWeek, setCurrentWeek] = useState(1); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
  const [todayTask, setTodayTask] = useState<PlanItem | null>(null); // –ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  const [todayWeek, setTodayWeek] = useState<number | null>(null); // –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–µ–≥–æ–¥–Ω—è
  const [daysRemaining, setDaysRemaining] = useState<number | null>(null); // –î–Ω–µ–π –¥–æ —Ü–µ–ª–∏
  // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ direction
  // const [direction, setDirection] = useState(0); 

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–ª–∞–Ω–∞ (–ø–æ–∫–∞ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞)
  // –í –±—É–¥—É—â–µ–º —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ userData –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const planStartDate = useMemo(() => new Date(), []); 

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –≤ –ø–ª–∞–Ω–µ
  const totalWeeks = useMemo(() => {
    if (samplePlan.length === 0) return 0;
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ
    return Math.max(...samplePlan.map(item => item.week));
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç samplePlan, –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞—Ç–∏—á–µ–Ω

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  useEffect(() => {
    const today = new Date();
    // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã
    today.setHours(0, 0, 0, 0); 
    planStartDate.setHours(0, 0, 0, 0);

    // –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const diffTime = today.getTime() - planStartDate.getTime();
    // +1, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–ª–∞–Ω–∞ - —ç—Ç–æ –¥–µ–Ω—å 0 —Ä–∞–∑–Ω–∏—Ü—ã
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1; 

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –¥–Ω—è –≤ –Ω–µ–¥–µ–ª–µ (1-7)
    const currentPlanWeek = Math.ceil(diffDays / 7);
    const currentPlanDayOfWeek = ((diffDays - 1) % 7) + 1;

    setTodayWeek(currentPlanWeek);

    // –ò—â–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const task = samplePlan.find(item => item.week === currentPlanWeek && item.day === currentPlanDayOfWeek) || null;
    setTodayTask(task);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é –Ω–µ–¥–µ–ª—é –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω–∞
    if (currentPlanWeek <= totalWeeks) {
        setCurrentWeek(currentPlanWeek);
    } else {
        // –ï—Å–ª–∏ –ø–ª–∞–Ω –ø—Ä–æ–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        setCurrentWeek(totalWeeks > 0 ? totalWeeks : 1);
    }
    
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
    const totalPlanDays = totalWeeks * 7;
    const remaining = Math.max(0, totalPlanDays - diffDays + 1); // +1 —Ç.–∫. diffDays –Ω—É–º–µ—Ä—É–µ—Ç—Å—è —Å 1
    setDaysRemaining(remaining);

  }, [planStartDate, totalWeeks]); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (planStartDate –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
  const currentWeekDates = useMemo(() => {
    const startOffset = (currentWeek - 1) * 7; // –î–Ω–µ–π –¥–æ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
    const endOffset = startOffset + 6; // –î–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏

    const weekStartDate = new Date(planStartDate);
    weekStartDate.setDate(planStartDate.getDate() + startOffset);

    const weekEndDate = new Date(planStartDate);
    weekEndDate.setDate(planStartDate.getDate() + endOffset);

    return {
        start: formatDate(weekStartDate),
        end: formatDate(weekEndDate)
    };

  }, [currentWeek, planStartDate]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
  const weekPlan = useMemo(() => 
      samplePlan.filter(item => item.week === currentWeek)
  , [currentWeek]);

  const goToPreviousWeek = () => {
    // setDirection(-1); // –£–±–∏—Ä–∞–µ–º
    setCurrentWeek(prev => Math.max(1, prev - 1)); // –ù–µ —É—Ö–æ–¥–∏–º –º–µ–Ω—å—à–µ 1
  };

  const goToNextWeek = () => {
    // setDirection(1); // –£–±–∏—Ä–∞–µ–º
    setCurrentWeek(prev => Math.min(totalWeeks, prev + 1)); // –ù–µ —É—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  };

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
  const handleMarkAsDone = () => console.log("–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–æ");
  const handleReschedule = () => console.log("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏");
  const handleAddComment = () => console.log("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");

  // –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –∑–∞–¥–∞—á–∏
  const todayCardStyle: React.CSSProperties = {
      backgroundColor: '#e7f3ff', // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
      borderRadius: '8px',
      padding: '15px',
      marginBottom: '20px',
      border: '1px solid #b3d7ff'
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
  const actionButtonStyle: React.CSSProperties = {
      background: 'none',
      border: '1px solid #007bff',
      color: '#007bff',
      padding: '5px 10px',
      borderRadius: '5px',
      cursor: 'pointer',
      marginRight: '10px',
      fontSize: '14px'
  };

  return (
    <div style={{ paddingBottom: '80px' }}> {/* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –º–µ–Ω—é */}
      {/* –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—é–¥–∞ */}
      <h1 style={{ textAlign: 'center', marginTop: '10px', marginBottom: '20px' }}>–ú–æ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h1>
      
      {/* 1. –ë–ª–æ–∫ "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∑–∞–¥–∞—á–∞" */} 
      {todayTask && todayWeek && todayWeek <= totalWeeks && (
          <div style={todayCardStyle}>
              <h2 style={{ marginTop: 0, marginBottom: '10px' }}>üéØ –°–µ–≥–æ–¥–Ω—è ({formatDate(new Date())}): {todayTask.type}</h2>
              <p style={{ margin: '0 0 15px 0' }}>{todayTask.description}</p>
              <div>
                  <button style={actionButtonStyle} onClick={handleMarkAsDone}><FontAwesomeIcon icon={faCheck} /> –°–¥–µ–ª–∞–ª</button>
                  <button style={actionButtonStyle} onClick={handleReschedule}><FontAwesomeIcon icon={faRepeat} /> –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏</button>
                  <button style={actionButtonStyle} onClick={handleAddComment}><FontAwesomeIcon icon={faPen} /> –ö–∞–∫ –ø—Ä–æ—à–ª–æ?</button>
              </div>
               {/* –ú–∏–Ω–∏-—Å—Ç–∞—Ç—É—Å */} 
               <p style={{ marginTop: '15px', marginBottom: '0', fontSize: '0.9em', color: '#555' }}>
                  –¢—ã –Ω–∞ {todayWeek}-–π –Ω–µ–¥–µ–ª–µ &mdash; 
                  {daysRemaining !== null ? ` –æ—Å—Ç–∞–ª–æ—Å—å ${daysRemaining} –¥–Ω–µ–π –¥–æ ${userData.goal || '—Ü–µ–ª–∏'}` : '–∏–¥–µ—à—å –∫ —Ü–µ–ª–∏!'}
               </p>
          </div>
      )} 
      {/* –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω */}
      {(!todayTask || (todayWeek && todayWeek > totalWeeks)) && (
           <div style={{ ...todayCardStyle, backgroundColor: '#f8f9fa', borderColor: '#dee2e6', textAlign: 'center' }}>
               <p style={{ margin: 0, fontWeight: 'bold' }}>
                 {todayWeek && todayWeek > totalWeeks ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞!' : '–°–µ–≥–æ–¥–Ω—è –æ—Ç–¥—ã—Ö –∏–ª–∏ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.'} 
               </p>
           </div>
      )}

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º —Å –¥–∞—Ç–∞–º–∏ */} 
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', margin: '20px 0' }}>
        <button onClick={goToPreviousWeek} disabled={currentWeek === 1}>
          &lt;
        </button>
        <div style={{ textAlign: 'center' }}>
            <h2>–ù–µ–¥–µ–ª—è {currentWeek} –∏–∑ {totalWeeks}</h2>
            <p style={{ margin: '0', fontSize: '0.9em', color: 'grey' }}>
                ({currentWeekDates.start} - {currentWeekDates.end})
            </p>
        </div>
        <button onClick={goToNextWeek} disabled={currentWeek === totalWeeks}>
           &gt;
        </button>
      </div>

      {/* –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É */} 
      <table border={1} style={{ width: '100%', borderCollapse: 'collapse', marginTop: '15px' }}>
        <thead>
          <tr>
            <th>–î–µ–Ω—å</th>
            <th>–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</th>
            <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
          </tr>
        </thead>
        <tbody>
          {weekPlan.length > 0 ? (
             weekPlan.map((item) => (
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º tr –∏ td
                <tr key={`${item.week}-${item.day}`}>
                    <td>–î–µ–Ω—å {item.day}</td>
                    <td>{item.type}</td>
                    <td>{item.description}</td>
                </tr>
            ))
          ) : (
            <tr>
                <td colSpan={3} style={{ textAlign: 'center', padding: '10px' }}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏.</td>
            </tr>
          )}
        </tbody>
      </table>
      
      {/* 2. –ë–ª–æ–∫ "AI-—Ñ–∏–¥–±–µ–∫" (–∑–∞–≥–ª—É—à–∫–∞) */} 
      <div style={{ backgroundColor: '#f0fff0', borderRadius: '8px', padding: '15px', marginTop: '20px', border: '1px solid #c3e6cb' }}>
          <h3 style={{ marginTop: 0, color: '#155724' }}>üß† –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã</h3>
          <p style={{ color: '#155724' }}>
              –ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –Ω–∞—á–Ω–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á.
          </p>
           {/* <p style={{ color: '#155724' }}>
               –ü—Ä–∏–º–µ—Ä: "–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã —É–∂–µ –ø—Ä–æ–±–µ–∂–∞–ª(–∞) X –∫–º –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é! –≠—Ç–æ +Y% –∫ –ø—Ä–æ—à–ª–æ–π. –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ä–∞–∑–º–∏–Ω–∫—É."
           </p> */} 
      </div>

      {/* –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º, –æ—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏ —Ç.–¥. */}
    </div>
  );
};

export default DashboardScreen; 