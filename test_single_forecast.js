require('dotenv').config();
const astronomy = require('astronomy-engine');
const OpenAI = require('openai');

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

function calculatePlanets(date) {
    const planets = {};
    try {
        const sun = astronomy.SunPosition(date);
        planets.sun = { name: '–°–æ–ª–Ω—Ü–µ', longitude: sun.elon, latitude: sun.elat };

        const moonVector = astronomy.GeoMoon(date);
        planets.moon = { name: '–õ—É–Ω–∞', longitude: getLongitude(moonVector), latitude: getLatitude(moonVector) };

        const mercury = astronomy.GeoVector('Mercury', date, false);
        planets.mercury = { name: '–ú–µ—Ä–∫—É—Ä–∏–π', longitude: getLongitude(mercury), latitude: getLatitude(mercury) };

        const venus = astronomy.GeoVector('Venus', date, false);
        planets.venus = { name: '–í–µ–Ω–µ—Ä–∞', longitude: getLongitude(venus), latitude: getLatitude(venus) };

        const mars = astronomy.GeoVector('Mars', date, false);
        planets.mars = { name: '–ú–∞—Ä—Å', longitude: getLongitude(mars), latitude: getLatitude(mars) };

        const jupiter = astronomy.GeoVector('Jupiter', date, false);
        planets.jupiter = { name: '–Æ–ø–∏—Ç–µ—Ä', longitude: getLongitude(jupiter), latitude: getLatitude(jupiter) };

        const saturn = astronomy.GeoVector('Saturn', date, false);
        planets.saturn = { name: '–°–∞—Ç—É—Ä–Ω', longitude: getLongitude(saturn), latitude: getLatitude(saturn) };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø–ª–∞–Ω–µ—Ç:', error);
    }
    return planets;
}

function getLongitude(vector) {
    const ecliptic = astronomy.Ecliptic(vector);
    return ecliptic.elon;
}

function getLatitude(vector) {
    const ecliptic = astronomy.Ecliptic(vector);
    return ecliptic.elat;
}

function getZodiacSign(longitude) {
    const signs = ['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞', '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'];
    const normalizedLon = ((longitude % 360) + 360) % 360;
    const signIndex = Math.floor(normalizedLon / 30);
    const degree = normalizedLon % 30;
    return { sign: signs[signIndex], degree: degree.toFixed(2) };
}

function calculateZodiacSigns(planets) {
    const zodiacSigns = {};
    for (const [key, planet] of Object.entries(planets)) {
        zodiacSigns[key] = getZodiacSign(planet.longitude);
    }
    return zodiacSigns;
}

function calculateAspect(transit, natal) {
    let diff = Math.abs(transit - natal);
    if (diff > 180) diff = 360 - diff;
    return diff;
}

function getAspectType(aspect) {
    if (aspect < 8) return '—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (0¬∞)';
    if (aspect >= 52 && aspect <= 68) return '—Å–µ–∫—Å—Ç–∏–ª—å (60¬∞) - –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π';
    if (aspect >= 82 && aspect <= 98) return '–∫–≤–∞–¥—Ä–∞—Ç (90¬∞) - –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π';
    if (aspect >= 112 && aspect <= 128) return '—Ç—Ä–∏–≥–æ–Ω (120¬∞) - –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π';
    if (aspect >= 172) return '–æ–ø–ø–æ–∑–∏—Ü–∏—è (180¬∞) - –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π';
    return `${Math.round(aspect)}¬∞`;
}

async function testForecast() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–û–ì–ù–û–ó–ê\n');

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const name = '–ê–Ω–Ω–∞';
    const birthDate = new Date('1988-03-30T09:45');
    const now = new Date();
    const endDate = new Date(now);
    endDate.setDate(now.getDate() + 30);

    console.log(`üë§ –ö–ª–∏–µ–Ω—Ç: ${name}`);
    console.log(`üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDate.toLocaleDateString('ru-RU')}`);
    console.log(`‚è∞ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${now.toLocaleDateString('ru-RU')} - ${endDate.toLocaleDateString('ru-RU')}\n`);

    // –†–∞—Å—á–µ—Ç—ã
    const natalPlanets = calculatePlanets(birthDate);
    const zodiacSigns = calculateZodiacSigns(natalPlanets);
    const currentTransits = calculatePlanets(now);

    const natalData = {
        sunSign: zodiacSigns.sun.sign,
        sunDegree: zodiacSigns.sun.degree,
        moonSign: zodiacSigns.moon.sign,
        moonDegree: zodiacSigns.moon.degree,
        mercurySign: zodiacSigns.mercury.sign,
        venusSign: zodiacSigns.venus.sign,
        marsSign: zodiacSigns.mars.sign,
        jupiterSign: zodiacSigns.jupiter.sign,
        saturnSign: zodiacSigns.saturn.sign
    };

    const currentTransitsData = {
        sunSign: getZodiacSign(currentTransits.sun.longitude).sign,
        moonSign: getZodiacSign(currentTransits.moon.longitude).sign,
        mercurySign: getZodiacSign(currentTransits.mercury.longitude).sign,
        venusSign: getZodiacSign(currentTransits.venus.longitude).sign,
        marsSign: getZodiacSign(currentTransits.mars.longitude).sign,
        jupiterSign: getZodiacSign(currentTransits.jupiter.longitude).sign,
        saturnSign: getZodiacSign(currentTransits.saturn.longitude).sign
    };

    const sunAspect = calculateAspect(currentTransits.sun.longitude, natalPlanets.sun.longitude);

    console.log('üîÆ –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:');
    console.log(`   –ù–∞—Ç–∞–ª—å–Ω–æ–µ –°–æ–ª–Ω—Ü–µ: ${natalData.sunSign} ${natalData.sunDegree}¬∞`);
    console.log(`   –ù–∞—Ç–∞–ª—å–Ω–∞—è –õ—É–Ω–∞: ${natalData.moonSign} ${natalData.moonDegree}¬∞`);
    console.log(`   –¢—Ä–∞–Ω–∑–∏—Ç–Ω–æ–µ –°–æ–ª–Ω—Ü–µ: ${currentTransitsData.sunSign}`);
    console.log(`   –ê—Å–ø–µ–∫—Ç –°–æ–ª–Ω—Ü–µ: ${getAspectType(sunAspect)}\n`);

    // –ü—Ä–æ–º–ø—Ç
    const prompt = `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è ${name} –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${now.toLocaleDateString('ru-RU')} - ${endDate.toLocaleDateString('ru-RU')}.

–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: –°–æ–ª–Ω—Ü–µ ${natalData.sunSign} ${natalData.sunDegree}¬∞, –õ—É–Ω–∞ ${natalData.moonSign}, –ú–µ—Ä–∫—É—Ä–∏–π ${natalData.mercurySign}, –í–µ–Ω–µ—Ä–∞ ${natalData.venusSign}, –ú–∞—Ä—Å ${natalData.marsSign}, –Æ–ø–∏—Ç–µ—Ä ${natalData.jupiterSign}, –°–∞—Ç—É—Ä–Ω ${natalData.saturnSign}.

–¢—Ä–∞–Ω–∑–∏—Ç—ã: –°–æ–ª–Ω—Ü–µ ${currentTransitsData.sunSign}, –õ—É–Ω–∞ ${currentTransitsData.moonSign}, –ú–µ—Ä–∫—É—Ä–∏–π ${currentTransitsData.mercurySign}, –í–µ–Ω–µ—Ä–∞ ${currentTransitsData.venusSign}, –ú–∞—Ä—Å ${currentTransitsData.marsSign}, –Æ–ø–∏—Ç–µ—Ä ${currentTransitsData.jupiterSign}, –°–∞—Ç—É—Ä–Ω ${currentTransitsData.saturnSign}.

–ù–∞—á–Ω–∏ "${name}, –≤–∞—à –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤!" –∏ –≤–∫–ª—é—á–∏: –≤–≤–µ–¥–µ–Ω–∏–µ, –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–µ –≤–ª–∏—è–Ω–∏—è —Å —ç–º–æ–¥–∑–∏, 5 —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏ (üíºüí∞‚ù§Ô∏èüè•üåü), –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã, –Ω–∞–º–µ–∫ –Ω–∞ –ø–æ–ª–Ω—ã–π –≥–æ–¥–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Å–≤–æ–±–æ–¥–µ –≤–æ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã: —Ç—Ä–∞–Ω–∑–∏—Ç, –∞—Å–ø–µ–∫—Ç, –∫–≤–∞–¥—Ä–∞—Ç, —Ç—Ä–∏–≥–æ–Ω. Markdown.`;

    console.log('üì® –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ö GPT-4o...\n');

    try {
        const startTime = Date.now();

        const completion = await openai.chat.completions.create({
            model: "gpt-4o",
            messages: [
                {
                    role: "system",
                    content: "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ü–∏—à–µ—à—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            temperature: 0.7,
            max_tokens: 2500
        });

        const endTime = Date.now();
        const forecast = completion.choices[0].message.content;
        const wordCount = forecast.split(/\s+/).length;

        console.log('‚úÖ –ü–†–û–ì–ù–û–ó –ü–û–õ–£–ß–ï–ù!\n');
        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${((endTime - startTime) / 1000).toFixed(2)} —Å–µ–∫`);
        console.log(`üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ${wordCount}`);
        console.log(`üî§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: ${forecast.length}\n`);
        console.log('‚îÄ'.repeat(80));
        console.log('\nüìÑ –¢–ï–ö–°–¢ –ü–†–û–ì–ù–û–ó–ê:\n');
        console.log(forecast);
        console.log('\n' + '‚îÄ'.repeat(80));

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        console.log('\n‚úì –ü–†–û–í–ï–†–ö–ò:');
        console.log(`   ${forecast.includes(name) ? '‚úÖ' : '‚ùå'} –ï—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–∏–º—è ${name})`);
        console.log(`   ${forecast.includes('üíº') || forecast.includes('üí∞') || forecast.includes('‚ù§Ô∏è') ? '‚úÖ' : '‚ùå'} –ï—Å—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏`);
        console.log(`   ${forecast.includes('—Ç—Ä–∞–Ω–∑–∏—Ç') || forecast.includes('–∞—Å–ø–µ–∫—Ç') ? '‚úÖ' : '‚ùå'} –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã`);
        console.log(`   ${wordCount >= 400 ? '‚úÖ' : '‚ùå'} –û–±—ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π (${wordCount} —Å–ª–æ–≤)`);
        console.log(`   ${!forecast.includes('–ò–∑–≤–∏–Ω–∏—Ç–µ') && !forecast.includes('Sorry') ? '‚úÖ' : '‚ùå'} –ù–µ—Ç –æ—Ç–∫–∞–∑–∞ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n`);

    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
        throw error;
    }
}

testForecast().catch(console.error);
