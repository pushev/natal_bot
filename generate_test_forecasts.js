require('dotenv').config();
const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ server.js
const astronomy = require('astronomy-engine');
const OpenAI = require('openai');

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const testCases = [
    {
        name: '–ê–Ω–Ω–∞',
        birthDate: '1988-03-30',
        birthTime: '09:45',
        city: '–ú–æ—Å–∫–≤–∞',
        lat: 55.7558,
        lon: 37.6173
    },
    {
        name: '–ú–∞—Ä–∏—è',
        birthDate: '1992-07-15',
        birthTime: '14:30',
        city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        lat: 59.9343,
        lon: 30.3351
    },
    {
        name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
        birthDate: '1985-11-22',
        birthTime: '08:20',
        city: '–ö–∞–∑–∞–Ω—å',
        lat: 55.7887,
        lon: 49.1221
    },
    {
        name: '–û–ª—å–≥–∞',
        birthDate: '1995-05-08',
        birthTime: '18:45',
        city: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        lat: 55.0084,
        lon: 82.9357
    }
];

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ server.js
function calculatePlanets(date) {
    const planets = {};

    try {
        const sun = astronomy.SunPosition(date);
        planets.sun = {
            name: '–°–æ–ª–Ω—Ü–µ',
            longitude: sun.elon,
            latitude: sun.elat
        };

        const moonVector = astronomy.GeoMoon(date);
        planets.moon = {
            name: '–õ—É–Ω–∞',
            longitude: getLongitude(moonVector),
            latitude: getLatitude(moonVector)
        };

        const mercury = astronomy.GeoVector('Mercury', date, false);
        planets.mercury = {
            name: '–ú–µ—Ä–∫—É—Ä–∏–π',
            longitude: getLongitude(mercury),
            latitude: getLatitude(mercury)
        };

        const venus = astronomy.GeoVector('Venus', date, false);
        planets.venus = {
            name: '–í–µ–Ω–µ—Ä–∞',
            longitude: getLongitude(venus),
            latitude: getLatitude(venus)
        };

        const mars = astronomy.GeoVector('Mars', date, false);
        planets.mars = {
            name: '–ú–∞—Ä—Å',
            longitude: getLongitude(mars),
            latitude: getLatitude(mars)
        };

        const jupiter = astronomy.GeoVector('Jupiter', date, false);
        planets.jupiter = {
            name: '–Æ–ø–∏—Ç–µ—Ä',
            longitude: getLongitude(jupiter),
            latitude: getLatitude(jupiter)
        };

        const saturn = astronomy.GeoVector('Saturn', date, false);
        planets.saturn = {
            name: '–°–∞—Ç—É—Ä–Ω',
            longitude: getLongitude(saturn),
            latitude: getLatitude(saturn)
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø–ª–∞–Ω–µ—Ç:', error);
    }

    return planets;
}

function getLongitude(vector) {
    const ecliptic = astronomy.Ecliptic(vector);
    return ecliptic.elon;
}

function getLatitude(vector) {
    const ecliptic = astronomy.Ecliptic(vector);
    return ecliptic.elat;
}

function getZodiacSign(longitude) {
    const signs = [
        '–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞',
        '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'
    ];

    const normalizedLon = ((longitude % 360) + 360) % 360;
    const signIndex = Math.floor(normalizedLon / 30);
    const degree = normalizedLon % 30;

    return {
        sign: signs[signIndex],
        degree: degree.toFixed(2)
    };
}

function calculateZodiacSigns(planets) {
    const zodiacSigns = {};

    for (const [key, planet] of Object.entries(planets)) {
        zodiacSigns[key] = getZodiacSign(planet.longitude);
    }

    return zodiacSigns;
}

function calculateAspect(transit, natal) {
    let diff = Math.abs(transit - natal);
    if (diff > 180) diff = 360 - diff;
    return diff;
}

async function generateMonthlyForecastWithGPT(name, birthDate, natalPlanets, zodiacSigns, currentTransits, midTransits, startDate, endDate) {
    try {
        const natalData = {
            sunSign: zodiacSigns.sun.sign,
            sunDegree: zodiacSigns.sun.degree,
            moonSign: zodiacSigns.moon.sign,
            moonDegree: zodiacSigns.moon.degree,
            mercurySign: zodiacSigns.mercury.sign,
            venusSign: zodiacSigns.venus.sign,
            marsSign: zodiacSigns.mars.sign,
            jupiterSign: zodiacSigns.jupiter.sign,
            saturnSign: zodiacSigns.saturn.sign
        };

        const currentTransitsData = {
            sunSign: getZodiacSign(currentTransits.sun.longitude).sign,
            sunDegree: getZodiacSign(currentTransits.sun.longitude).degree,
            moonSign: getZodiacSign(currentTransits.moon.longitude).sign,
            mercurySign: getZodiacSign(currentTransits.mercury.longitude).sign,
            venusSign: getZodiacSign(currentTransits.venus.longitude).sign,
            marsSign: getZodiacSign(currentTransits.mars.longitude).sign,
            jupiterSign: getZodiacSign(currentTransits.jupiter.longitude).sign,
            saturnSign: getZodiacSign(currentTransits.saturn.longitude).sign
        };

        const sunAspect = calculateAspect(currentTransits.sun.longitude, natalPlanets.sun.longitude);

        const prompt = `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è ${name} –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${startDate.toLocaleDateString('ru-RU')} - ${endDate.toLocaleDateString('ru-RU')}.

–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: –°–æ–ª–Ω—Ü–µ ${natalData.sunSign} ${natalData.sunDegree}¬∞, –õ—É–Ω–∞ ${natalData.moonSign}, –ú–µ—Ä–∫—É—Ä–∏–π ${natalData.mercurySign}, –í–µ–Ω–µ—Ä–∞ ${natalData.venusSign}, –ú–∞—Ä—Å ${natalData.marsSign}, –Æ–ø–∏—Ç–µ—Ä ${natalData.jupiterSign}, –°–∞—Ç—É—Ä–Ω ${natalData.saturnSign}.

–¢—Ä–∞–Ω–∑–∏—Ç—ã: –°–æ–ª–Ω—Ü–µ ${currentTransitsData.sunSign}, –õ—É–Ω–∞ ${currentTransitsData.moonSign}, –ú–µ—Ä–∫—É—Ä–∏–π ${currentTransitsData.mercurySign}, –í–µ–Ω–µ—Ä–∞ ${currentTransitsData.venusSign}, –ú–∞—Ä—Å ${currentTransitsData.marsSign}, –Æ–ø–∏—Ç–µ—Ä ${currentTransitsData.jupiterSign}, –°–∞—Ç—É—Ä–Ω ${currentTransitsData.saturnSign}.

–ù–∞—á–Ω–∏ "${name}, –≤–∞—à –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤!" –∏ –≤–∫–ª—é—á–∏: –≤–≤–µ–¥–µ–Ω–∏–µ, –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–µ –≤–ª–∏—è–Ω–∏—è —Å —ç–º–æ–¥–∑–∏, 5 —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏ (üíºüí∞‚ù§Ô∏èüè•üåü), –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã, –Ω–∞–º–µ–∫ –Ω–∞ –ø–æ–ª–Ω—ã–π –≥–æ–¥–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Å–≤–æ–±–æ–¥–µ –≤–æ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã: —Ç—Ä–∞–Ω–∑–∏—Ç, –∞—Å–ø–µ–∫—Ç, –∫–≤–∞–¥—Ä–∞—Ç, —Ç—Ä–∏–≥–æ–Ω. Markdown.`;

        const completion = await openai.chat.completions.create({
            model: "gpt-4o",
            messages: [
                {
                    role: "system",
                    content: "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ü–∏—à–µ—à—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            temperature: 0.7,
            max_tokens: 2500
        });

        return completion.choices[0].message.content;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ GPT:', error);
        throw error;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function generateTestForecasts() {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...\n');

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const resultsDir = path.join(__dirname, 'examples', 'generated_forecasts');
    if (!fs.existsSync(resultsDir)) {
        fs.mkdirSync(resultsDir, { recursive: true });
    }

    for (let i = 0; i < testCases.length; i++) {
        const testCase = testCases[i];
        console.log(`\n[${i + 1}/${testCases.length}] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è ${testCase.name}...`);

        try {
            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            const birthDateTime = new Date(`${testCase.birthDate}T${testCase.birthTime}`);

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã
            const natalPlanets = calculatePlanets(birthDateTime);
            const zodiacSigns = calculateZodiacSigns(natalPlanets);

            // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ —Ç—Ä–∞–Ω–∑–∏—Ç—ã
            const now = new Date();
            const endDate = new Date(now);
            endDate.setDate(now.getDate() + 30);

            const currentTransits = calculatePlanets(now);
            const midDate = new Date(now);
            midDate.setDate(now.getDate() + 15);
            const midTransits = calculatePlanets(midDate);

            console.log(`  –ù–∞—Ç–∞–ª—å–Ω–æ–µ –°–æ–ª–Ω—Ü–µ: ${zodiacSigns.sun.sign} ${zodiacSigns.sun.degree}¬∞`);
            console.log(`  –ù–∞—Ç–∞–ª—å–Ω–∞—è –õ—É–Ω–∞: ${zodiacSigns.moon.sign} ${zodiacSigns.moon.degree}¬∞`);
            console.log('  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ GPT-4o...');

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            const forecast = await generateMonthlyForecastWithGPT(
                testCase.name,
                birthDateTime,
                natalPlanets,
                zodiacSigns,
                currentTransits,
                midTransits,
                now,
                endDate
            );

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            const fullReport = `# –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è ${testCase.name}

## –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è
- **–ò–º—è:** ${testCase.name}
- **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** ${testCase.birthDate}
- **–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è:** ${testCase.birthTime}
- **–ì–æ—Ä–æ–¥:** ${testCase.city}

## –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
- ‚òâ –°–æ–ª–Ω—Ü–µ: ${zodiacSigns.sun.sign} ${zodiacSigns.sun.degree}¬∞
- ‚òΩ –õ—É–Ω–∞: ${zodiacSigns.moon.sign} ${zodiacSigns.moon.degree}¬∞
- ‚òø –ú–µ—Ä–∫—É—Ä–∏–π: ${zodiacSigns.mercury.sign}
- ‚ôÄ –í–µ–Ω–µ—Ä–∞: ${zodiacSigns.venus.sign}
- ‚ôÇ –ú–∞—Ä—Å: ${zodiacSigns.mars.sign}
- ‚ôÉ –Æ–ø–∏—Ç–µ—Ä: ${zodiacSigns.jupiter.sign}
- ‚ôÑ –°–∞—Ç—É—Ä–Ω: ${zodiacSigns.saturn.sign}

## –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞
${now.toLocaleDateString('ru-RU')} - ${endDate.toLocaleDateString('ru-RU')}

---

${forecast}

---

*–ü—Ä–æ–≥–Ω–æ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}*
*–ú–æ–¥–µ–ª—å: GPT-4o*
`;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            const filename = `forecast_${testCase.name.toLowerCase()}_${testCase.birthDate}.md`;
            const filepath = path.join(resultsDir, filename);
            fs.writeFileSync(filepath, fullReport, 'utf-8');

            const wordCount = forecast.split(/\s+/).length;
            console.log(`  ‚úì –ì–æ—Ç–æ–≤–æ! –°–ª–æ–≤ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: ${wordCount}`);
            console.log(`  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${filepath}`);

            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if (i < testCases.length - 1) {
                console.log('  –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...');
                await new Promise(resolve => setTimeout(resolve, 2000));
            }

        } catch (error) {
            console.error(`  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è ${testCase.name}:`, error.message);
        }
    }

    console.log('\n\n‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ examples/generated_forecasts/');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateTestForecasts().catch(console.error);
